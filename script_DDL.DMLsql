
CREATE DATABASE PetShopEcommerce;


USE PetShopEcommerce;
-- criação da tabela cliente
CREATE TABLE Cliente (
    idCliente INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    Nome VARCHAR(100) NOT NULL,
    Telefone VARCHAR(17) NOT NULL,
    Email VARCHAR(80) NOT NULL,
    CPF VARCHAR(14) NOT NULL UNIQUE,
    DataCadastro DATETIME DEFAULT GETDATE() NOT NULL
);

-- Inserindo valores na tabela Cliente
INSERT INTO Cliente (Nome, Telefone, Email, CPF)
VALUES 
('Ana Clara', '(11) 98765-4321', 'ana.clara@gmail.com', '123.456.789-00'),
('Bruno Silva', '(21) 99876-5432', 'bruno.silva@hotmail.com', '234.567.890-11');

-- criação da tabela fornecedor
CREATE TABLE Fornecedor (
    idFornecedor INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeFornecedor VARCHAR(60) NOT NULL,
    CNPJ VARCHAR(14) UNIQUE NOT NULL,
    Telefone VARCHAR(20) NOT NULL,
    Email VARCHAR(80) NOT NULL,
    Endereco VARCHAR(100) NOT NULL
);

-- Inserindo valores na tabela Fornecedor
INSERT INTO Fornecedor (NomeFornecedor, CNPJ, Telefone, Email, Endereco)
VALUES 
('PetFood Ltda', '12345678000190', '(11) 99888-7777', 'contato@petfood.com.br', 'Rua das Flores, 123'),
('VetCare Supplies', '98765432000121', '(21) 99777-8888', 'suporte@vetcare.com', 'Av. dos Animais, 456');

-- criação da tabela fornecedor
CREATE TABLE Categoria (
    idCategoria INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeCategoria VARCHAR(50) NOT NULL
);

-- Inserindo valores na tabela Categoria
INSERT INTO Categoria (NomeCategoria)
VALUES 
('Ração'),
('Brinquedos'),
('Acessórios');

-- criação da tabela Produto
CREATE TABLE Produto (
    idProduto INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeProduto VARCHAR(50) NOT NULL,
    Preço DECIMAL(10,2) NOT NULL,
    idCategoria INT NOT NULL,
    idFornecedor INT NOT NULL,
    FOREIGN KEY (idCategoria) REFERENCES Categoria(idCategoria),
    FOREIGN KEY (idFornecedor) REFERENCES Fornecedor(idFornecedor)
);

-- Inserindo valores na tabela Produto
INSERT INTO Produto (NomeProduto, Preço, idCategoria, idFornecedor)
VALUES 
('Ração Premium 10kg', 120.50, 1, 1),
('Bola de Borracha', 25.99, 2, 2),
('Coleira Ajustável', 45.90, 3, 2);

-- criação tabela Pedido

CREATE TABLE Pedido (
    idPedido INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    DataPedido DATE DEFAULT GETDATE() NOT NULL,
    ValorTotal DECIMAL(10,2) NOT NULL,
    StatusPagamento VARCHAR(22) NOT NULL
);

-- Inserindo valores na tabela Pedido
INSERT INTO Pedido (DataPedido, ValorTotal, StatusPagamento)
VALUES 
(GETDATE(), 120.50, 'Pago'),
(GETDATE(), 71.89, 'Pendente');


-- Tabela estoque

CREATE TABLE Estoque(
    idEstoque INT IDENTITY(1,1) PRIMARY KEY NOT NULL,  -- idEstoque como chave primária com incremento automático.
    idProduto INT NOT NULL,  -- Chave estrangeira para a tabela Produto.
    DataAtualizacao DATETIME DEFAULT GETDATE(),  -- Data de atualização com valor padrão de data atual.
    Quantidade INT NOT NULL,  -- Quantidade disponível no estoque.
    FOREIGN KEY (idProduto) REFERENCES Produto(idProduto)  -- Relaciona com a tabela Produto.
);


-- Inserindo dados de exemplo na tabela Estoque
INSERT INTO Estoque (idProduto, Quantidade)
VALUES 
(1, 50),  -- Produto 1 com 50 unidades no estoque
(2, 30),  -- Produto 2 com 30 unidades no estoque
(3, 100); -- Produto 3 com 100 unidades no estoque

-- criação da tabela PedidoProduto

CREATE TABLE PedidoProduto (
    idPedido INT NOT NULL,
    idProduto INT NOT NULL,
    Quantidade INT NOT NULL,
    PreçoUnitario DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (idPedido, idProduto),
    FOREIGN KEY (idPedido) REFERENCES Pedido(idPedido),
    FOREIGN KEY (idProduto) REFERENCES Produto(idProduto)
);

-- Inserindo valores na tabela PedidoProduto
INSERT INTO PedidoProduto (idPedido, idProduto, Quantidade, PreçoUnitario)
VALUES 
(1, 1, 1, 120.50),
(2, 2, 2, 25.99),
(2, 3, 1, 45.90);


-- tabela LOG
CREATE TABLE Log (
    id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    nome_tabela VARCHAR(50) NOT NULL,
    operacao VARCHAR(10) NOT NULL CHECK (operacao IN ('INSERT', 'UPDATE', 'DELETE')),
    valor_atual VARCHAR(500) NULL,
    valor_novo VARCHAR(500) NULL,
    DataHora DATETIME DEFAULT GETDATE() NOT NULL
);

CREATE TRIGGER trg_Cliente_Audit
ON Cliente
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Registro de INSERT
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_novo)
        SELECT 
            'Cliente', 
            'INSERT', 
            CONCAT('Nome: ', Nome, ', Telefone: ', Telefone, ', Email: ', Email, ', CPF: ', CPF)
        FROM inserted;
    END

    -- Registro de UPDATE
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_atual, valor_novo)
        SELECT 
            'Cliente', 
            'UPDATE', 
            CONCAT('Nome: ', d.Nome, ', Telefone: ', d.Telefone, ', Email: ', d.Email, ', CPF: ', d.CPF),
            CONCAT('Nome: ', i.Nome, ', Telefone: ', i.Telefone, ', Email: ', i.Email, ', CPF: ', i.CPF)
        FROM deleted d
        INNER JOIN inserted i ON d.idCliente = i.idCliente;
    END

    -- Registro de DELETE
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_atual)
        SELECT 
            'Cliente', 
            'DELETE', 
            CONCAT('Nome: ', Nome, ', Telefone: ', Telefone, ', Email: ', Email, ', CPF: ', CPF)
        FROM deleted;
    END
END;
