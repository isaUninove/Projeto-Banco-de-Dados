-- Criação do Banco de Dados
CREATE DATABASE PetShop;
USE PetShop;

-- Tabela Cliente
CREATE TABLE Cliente (
    idCliente INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    Nome VARCHAR(100) NOT NULL,
    Telefone VARCHAR(17) NOT NULL,
    Email VARCHAR(80) NOT NULL,
    CPF VARCHAR(14) NOT NULL UNIQUE,
    DataCadastro DATETIME DEFAULT GETDATE() NOT NULL
);

-- Inserindo valores na tabela Cliente
INSERT INTO Cliente (Nome, Telefone, Email, CPF)
VALUES 
('Ana Clara', '(11) 98765-4321', 'ana.clara@gmail.com', '123.456.789-00'),
('Bruno Silva', '(21) 99876-5432', 'bruno.silva@hotmail.com', '234.567.890-11');

-- Tabela Fornecedor
CREATE TABLE Fornecedor (
    idFornecedor INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeFornecedor VARCHAR(60) NOT NULL,
    CNPJ VARCHAR(14) UNIQUE NOT NULL,
    Telefone VARCHAR(20) NOT NULL,
    Email VARCHAR(80) NOT NULL,
    Endereco VARCHAR(100) NOT NULL
);

-- Inserindo valores na tabela Fornecedor
INSERT INTO Fornecedor (NomeFornecedor, CNPJ, Telefone, Email, Endereco)
VALUES 
('PetFood Ltda', '12345678000190', '(11) 99888-7777', 'contato@petfood.com.br', 'Rua das Flores, 123'),
('VetCare Supplies', '98765432000121', '(21) 99777-8888', 'suporte@vetcare.com', 'Av. dos Animais, 456');

-- Tabela Categoria
CREATE TABLE Categoria (
    idCategoria INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeCategoria VARCHAR(50) NOT NULL
);

-- Inserindo valores na tabela Categoria
INSERT INTO Categoria (NomeCategoria)
VALUES 
('Ração'),
('Brinquedos'),
('Acessórios');

-- Tabela Produto
CREATE TABLE Produto (
    idProduto INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NomeProduto VARCHAR(50) NOT NULL,
    Preço DECIMAL(10,2) NOT NULL,
    idCategoria INT NOT NULL,
    idFornecedor INT NOT NULL,
    FOREIGN KEY (idCategoria) REFERENCES Categoria(idCategoria),
    FOREIGN KEY (idFornecedor) REFERENCES Fornecedor(idFornecedor)
);

-- Inserindo valores na tabela Produto
INSERT INTO Produto (NomeProduto, Preço, idCategoria, idFornecedor)
VALUES 
('Ração Premium 10kg', 120.50, 1, 1),
('Bola de Borracha', 25.99, 2, 2),
('Coleira Ajustável', 45.90, 3, 2);

-- Tabela Pedido
CREATE TABLE Pedido (
    idPedido INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    idCliente INT NOT NULL,
    DataPedido DATE DEFAULT GETDATE() NOT NULL,
    ValorTotal DECIMAL(10,2) NOT NULL,
    StatusPagamento VARCHAR(22) NOT NULL,
    FOREIGN KEY (idCliente) REFERENCES Cliente(idCliente)
);

-- Inserindo valores na tabela Pedido
INSERT INTO Pedido (idCliente, DataPedido, ValorTotal, StatusPagamento)
VALUES 
(1, GETDATE(), 120.50, 'Pago'),
(2, GETDATE(), 71.89, 'Pendente');

-- Tabela Estoque
CREATE TABLE Estoque (
    idEstoque INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    idProduto INT NOT NULL,
    DataAtualizacao DATETIME DEFAULT GETDATE(),
    Quantidade INT NOT NULL,
    FOREIGN KEY (idProduto) REFERENCES Produto(idProduto)
);

-- Inserindo valores na tabela Estoque
INSERT INTO Estoque (idProduto, Quantidade)
VALUES 
(1, 50),
(2, 30),
(3, 100);

-- Tabela PedidoProduto
CREATE TABLE PedidoProduto (
    idPedido INT NOT NULL,
    idProduto INT NOT NULL,
    Quantidade INT NOT NULL,
    PreçoUnitario DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (idPedido, idProduto),
    FOREIGN KEY (idPedido) REFERENCES Pedido(idPedido),
    FOREIGN KEY (idProduto) REFERENCES Produto(idProduto)
);

-- Inserindo valores na tabela PedidoProduto
INSERT INTO PedidoProduto (idPedido, idProduto, Quantidade, PreçoUnitario)
VALUES 
(1, 1, 1, 120.50),
(2, 2, 2, 25.99),
(2, 3, 1, 45.90);

-- Tabela Entrega
CREATE TABLE Entrega (
    idEntrega INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    idPedido INT NOT NULL,
    status_entrega VARCHAR(30) NOT NULL,
    data_de_entrega DATE DEFAULT GETDATE(),
    FOREIGN KEY (idPedido) REFERENCES Pedido(idPedido)
);

-- Inserindo valores na tabela Entrega
INSERT INTO Entrega (idPedido, status_entrega, data_de_entrega)
VALUES 
(1, 'Entregue', GETDATE()),
(2, 'Pendente', NULL);

-- Tabela Pagamento
CREATE TABLE Pagamento (
    idPagamento INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    idPedido INT NOT NULL,
    status_do_pagamento VARCHAR(30) NOT NULL,
    data_pagamento DATE DEFAULT GETDATE(),
    tipo_pagamento VARCHAR(20) NOT NULL,
    FOREIGN KEY (idPedido) REFERENCES Pedido(idPedido)
);

-- Inserindo valores na tabela Pagamento
INSERT INTO Pagamento (idPedido, status_do_pagamento, data_pagamento, tipo_pagamento)
VALUES 
(1, 'Aprovado', GETDATE(), 'Crédito'),
(2, 'Pendente', NULL, 'Boleto');

-- Tabela de Log
CREATE TABLE Log (
    id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    nome_tabela VARCHAR(50) NOT NULL,
    operacao VARCHAR(10) NOT NULL CHECK (operacao IN ('INSERT', 'UPDATE', 'DELETE')),
    valor_atual VARCHAR(500) NULL,
    valor_novo VARCHAR(500) NULL,
    DataHora DATETIME DEFAULT GETDATE() NOT NULL
);


-- Criação das Triggers
CREATE TRIGGER trg_Cliente_Audit
ON Cliente
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Registro de INSERT
    IF EXISTS (SELECT 1 FROM inserted) AND NOT EXISTS (SELECT 1 FROM deleted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_novo)
        SELECT 
            'Cliente', 
            'INSERT', 
            CONCAT('Nome: ', Nome, ', Telefone: ', Telefone, ', Email: ', Email, ', CPF: ', CPF)
        FROM inserted;
    END;

    -- Registro de UPDATE
    IF EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_atual, valor_novo)
        SELECT 
            'Cliente', 
            'UPDATE', 
            CONCAT('Nome: ', d.Nome, ', Telefone: ', d.Telefone, ', Email: ', d.Email, ', CPF: ', d.CPF),
            CONCAT('Nome: ', i.Nome, ', Telefone: ', i.Telefone, ', Email: ', i.Email, ', CPF: ', i.CPF)
        FROM deleted d
        INNER JOIN inserted i ON d.idCliente = i.idCliente;
    END;

    -- Registro de DELETE
    IF EXISTS (SELECT 1 FROM deleted) AND NOT EXISTS (SELECT 1 FROM inserted)
    BEGIN
        INSERT INTO Log (nome_tabela, operacao, valor_atual)
        SELECT 
            'Cliente', 
            'DELETE', 
            CONCAT('Nome: ', Nome, ', Telefone: ', Telefone, ', Email: ', Email, ', CPF: ', CPF)
        FROM deleted;
    END;
END;



--Evidência 1: INSERT
SELECT * FROM Cliente;

-- INSERINDO UM DADO NA TABELA CLIENTE
INSERT INTO Cliente (Nome, Telefone, Email, CPF)
VALUES ('Carlos Almeida', '(31) 98765-1234', 'carlos.almeida@gmail.com', '345.678.901-22');

SELECT * FROM Cliente;

--SELECT na Tabela Log
SELECT * FROM Log WHERE operacao = 'INSERT';


--Evidência 2: DELETE

SELECT * FROM Cliente;

-- DELETANDO cliente 4
DELETE FROM Cliente WHERE idCliente = 4;
SELECT * FROM Cliente;

-- SELECT na tabela LOG após o DELETE
SELECT * FROM Log WHERE operacao = 'DELETE';


-- Evidência 3: UPDATE

SELECT * FROM Cliente;

-- UPDATE NA TABELA CLIENTE 
UPDATE Cliente
SET Telefone = '(31) 91234-5678'
WHERE idCliente = 1;

SELECT * FROM CLIENTE;

-- SELECT na tabela LOG após o UPDATE
SELECT * FROM Log WHERE operacao = 'UPDATE';



